'''
import telebot
import requests

API_TOKEN = '7886805220:AAHSmidDJ6MToG28sIvodK7_HjFRZwHt-zE'
SERVER_URL = 'http://localhost:5000'  
bot = telebot.TeleBot(API_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "Welcome! Use /upload to upload data.")

@bot.message_handler(commands=['upload'])
def upload(message):
    bot.send_message(message.chat.id, "Please send me a CSV file.")

@bot.message_handler(content_types=['document'])
def handle_document(message):
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    if not message.document.file_name.endswith('.csv'):
        bot.send_message("Invalid fromat")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    response = requests.post(f"{SERVER_URL}/upload", files={'file':downloaded_file})
    bot.send_message(message.chat.id, response.json().get("message", "Error"))

@bot.message_handler(commands=['preprocess'])
def preprocess(message):
    response = requests.post(f"{SERVER_URL}/preprocess")
    bot.send_message(message.chat.id, response.json().get("message", "Error"))

@bot.message_handler(commands=['models'])
def list_models(message):
    response = requests.get(f"{SERVER_URL}/models")
    models = response.json()
    bot.send_message(message.chat.id, "Available models: " + ", ".join(models))

@bot.message_handler(commands=['select_model'])
def select_model(message):
    model_name = message.text.split()[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤–∏–¥–∞ /select_model model_name
    response = requests.post(f"{SERVER_URL}/select_model", json={"model_name": model_name})
    bot.send_message(message.chat.id, response.json().get("message", "Error"))

@bot.message_handler(commands=['predict'])
def predict(message):
    response = requests.post(f"{SERVER_URL}/predict")
    predictions = response.json()
    bot.send_message(message.chat.id, "Predictions: " + str(predictions))

if __name__ == '__main__':
    bot.polling(none_stop=True)

'''

import telebot
from telebot import types
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '7886805220:AAHSmidDJ6MToG28sIvodK7_HjFRZwHt-zE'
SERVER_URL = 'http://localhost:5000'  

bot = telebot.TeleBot(API_TOKEN)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        "üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "üìä –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π",
        "ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å",
        "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"
    ]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def upload_file(message):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, handle_document)

def handle_document(message):
    if message.document is None or not message.document.file_name.endswith('.csv'):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV.", reply_markup=main_keyboard())
        return
    
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        response = requests.post(f"{SERVER_URL}/upload", files={'file': downloaded_file})
        if response.status_code == 200:
            bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!", reply_markup=main_keyboard())
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞", reply_markup=main_keyboard())
    
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞")
def preprocess_data(message):
    try:
        response = requests.post(f"{SERVER_URL}/preprocess")
        bot.send_message(message.chat.id, response.json().get("message", "‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"), reply_markup=main_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üìä –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
def show_models(message):
    try:
        response = requests.get(f"{SERVER_URL}/models")
        models = response.json()
        bot.send_message(message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{', '.join(models)}", reply_markup=main_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: message.text == "ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")
def select_model_step1(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, select_model_step2)

def select_model_step2(message):
    try:
        model_name = message.text
        response = requests.post(f"{SERVER_URL}/select_model", json={"model_name": model_name})
        bot.send_message(message.chat.id, response.json().get("message", "‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞"), reply_markup=main_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
def make_prediction(message):
    try:
        response = requests.post(f"{SERVER_URL}/predict")
        predictions = response.json()
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:\n{predictions}", reply_markup=main_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_keyboard())

if __name__ == '__main__':
    bot.polling(none_stop=True)